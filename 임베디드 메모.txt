-------------------------------------------------------------------

09.08

스케쥴러가 하는일
- 리소스 관리 ( 멀티태스킹을 위해 )
- task의 run 순위 정하기

CFS
Completely Fair Scheduler
- 리눅스의 스케쥴러


일반 시스템은 정확한 결과값을 중시
미사일 같이 특이한 경우는 얼마나 시간이 걸리지를 중시

일반 시스템의 경우 파이프라인 페이즈마다의 시간 계산이 어렵다. 예측 어려움
			(복잡함)

파이프라인 5단계
instruction fetch
instruction decode	Reg
Execution		ALU
Data aceess
Write-back		Reg

-> 파이프라인 3단계로 심플화 (ARM : CPU 디자인 회사)
-> 명령어 처리시간 예측가능함 
-> 임베디드에 많이 사용

 스마트폰 활성화하면서 ARM 의 파이프라인이 많이 사용됨


우선순위가 높거나(중요) 긴급한 task 먼저 실행	vs 	Fair
임베디드 시스템 vs 일반 시스템


무기가 많이 발전된 국가(미국,러시아,..) 생활전자제품 많이 발전

RISC architecture
-> load store  모든계산을 레지스터들만으로도 가능
-> 시간 예측 가능



------------------------------------------------------------------------

09.15

dd 명령어(disk dump)   /dev/sta1 or stb1  디스크 분할 
 -> 비어있는 디스크를 사용가능한 디바이스파일로 바꾼다

c : character
d : block device 

mount :디스크에 연결 (sd카드를 라즈베리파이에 마운트)


Schematic Design
: A logical representation of the circuit
I/O 핀 사이의 논리적 연결을 만든다


PCB Design
: 실직적인 회로이기 때문에 라인이 겹치면 안된다
-> 재배열한다. 안될경우 층을 늘린다. 섬세함이 필요하다.


Embedded SW Development

-Host system


-Target system


-Connection
 USB케이블을 사용하지만 인식은 serial port
	시뮬레이터,에뮬레이터

-Cross compiler
 호스트와 타겟의 cpu가 다르다

GPIO : Non standard I/O  (스탠다드 인터페이스를 따르지 않다 usb,....)

정해져 있지 않고 설정 가능 General Purpose I/O

dev/GPIO/10 -> 10번을 I/O 로



Structure

System on chip ( System Bus- Memory, I/O device, Display)
System Bus
우선순위 없이 계속 일했지만 우선순위가 생겼다.(화면 등)
-> 버스를 늘렸다 (중요한거 담당 ex화면)


------------------------------------------------

0922

lecture03-2

dev/GPIO/___ (num)
sys/______  : 카테고리를 나누기 위해 sys를 쓸수 있다.

System Call : 커널의 서비스를 사용자가 호출한다
-open
-close
-read
-write
-IOCTL

mknod 디바이스파일을 만들때 쓰는 명령어

major #  리눅스가 디바이스를 구분하는 법 (번호가 지정돼있다)

mknod /dev/____ 128  파일이랑 넘버를 매칭해놓는다.

device driver writing 메이저넘버에 해당하는 코드를 만드는 것

각각의 메이저넘버 코드 패키지는
open(){}
read(){}
write(){} 같은 시스템콜이 내재되어있다.

12/25
파이프라인 다섯단계의 모습

RISC 프로세서는 레지스터끼리의 계산 load,store
대부분 General Purpose 레지스터이다.
Special Purpose 레지스터는 카운터


16/25
여럿이(multiple) 접근(access) 하고 충돌이 일어날때 기다리게한다

24/25
폰노이만 (컨트롤 플로우) Instruction 이 나온 후 Data
	: Instruction을 받는 속도 = 처리속도
	명령어가 addressable 메모리에 있다(100번지 104번지 108번지...)
하버드 (데이타 플로우) Data를 보고 뭘 할지 안다
	:

----------------------------------------------------------------

1013

중간고사
75퍼
수업중 보여준것과 말한것
-엔비디아, 팔컴등 회사의 강점

25퍼
-임베디드 리눅스 기초 
:file systems (마운트, dd )
 system configurations (etc 폴더,호스트,네트워크폴더)
 Device files and nodes (how to use GPIOs)
	- GPIO 몇번에 뭐를 쓰기 위한 코드 쓰기


lecture 04


CSMACD 이더넷, 버스 

버스에서 일을 처리하던 중 미루고 다른일 가능 -> 정확한 시간 예상 불가능

데이타가 디바이스에 도착하는 시간이 매우 중요한 경우 (디스플레이) -> 새로운 버스

bus that dedicate for display.

CPU가 데이타 이동에 관여하지 않는 방법( CPU는 바쁘기 때문에 다른일을 한다)
	-> Direct Memory Access (DMA) . 이니시에이팅만 한다(시작)

CPU 가 DMA 에게 일을 시킨다

메모리 시스템의 역할
 - Temporary storage for calculate
 - Permannet storage for programs and data.


000000 ~ FFFFFF 메모리 주소 중 뭐에 Mapping 돼있는지 알아야한다.

캐시
:CPU와 메모리 사이에 작은 메모리 같은 개념

Memory Hierarchy
:메모리 사용빈도(접근)에 따라 캐시에 둠으로써 속도 향상

많은 데이타중 사용되는 데이타는 적다
-> 그 중 사용되는 데이타는 계속 사용될 일이 많다.

캐시에 128KB 메모리 4G (적중률 90 이상)
-> 캐시는 expensive 하기 때문에 용량이 작다.

Volatile (휘발성)

Nonvolatile storage = Disk

Nonvolatile memory = Flash memory

NOR Flash 는 DRAM 같은 일을 하고 NAND Flash는 DISK 처럼 일 한다

키워드 : addressable

주소를 갖고 접근하면 NOR Flash 나 DRAM 이다

디스크에 있는 파일은 주소접근이 아니다. Track number,sector number

가격 : NOR Flash >>>>> NAND Flash

플래시 메모리 대부분은 하이닉스 삼성 (80퍼 이상)

최근 많이 쓰는것은 NAND Flash.
NAND Flash 는 디스크와 비슷. 실행 불가능 (address X)
Block number 를 Track number,sector number에 맵핑한다.
요즘은 플래시 메모리를 위한 파일시스템을 만들었다.

최신 메모리인 PRAM,STTRAM,RRAM 은 DRAM 같이 일하지만 
Nonvolatile 이다.(상용화는 아직 x)

SRAM 
비싸지만 빠르다

DRAM
전기가 많이 필요하다

11/25

Flash Memory 의 특징

- Out of place update

 Erase Unit >>> Read/write unit (지우는 최소 단위가 더 크다)
 내용 수정을 위해서는
 -내용 복사
 -내용 삭제
 -내용 수정 

 이는 시간이 오래걸리고 복잡하다 
 -> 두 개의 레이어

 수정할때 다른 레이어에 수정한 후 그 것을 채택하여 사용
 -> 사용 안하는 레이어는 garbage collection 으로 일안할 때 erase한다

- write speed <<<<<< read speed (4배정도 차이)


12/25

MLC : 값이 제일 싸지만 에러율 높다


Virtual memory 
: physical memory와 logical memory를 맵핑하는 곳
  무제한 메모리를 쓰는 환상을 심어준다 (가상 메모리 만든 이유)
  각각의 어플은 각각의 가장 주소를 갖고 각각의 피지컬주소와 맵핑 돼있다 
  (맵핑: page table . 각각의 어플은 각각의 page table을 갖는다)

디맨드 페이징
: 프로그램 실행중 필요하게 된 것을 virtual memory에서 main memory로 복사
  한번에 조금씩. 첫페이지 복사. 정말 필요할때 일한다(lazy)
   -> 리소스 점유를 최소화하기 위해

LRU (Least Recently Used) 알고리즘


--------------------------------------

1027

Lecture04

17/25
버츄얼메모리
-무제한 메모리를 쓰는 환상(가상의 메모리)
-프로텍션(페이지테이블을 통해 실제 주소로 연결)
		같은 가상주소라도 실제 주소로 연결되는건 다르다

페이지테이블
-피지컬메모리와 로지컬메모리를 맵핑
-모든 데이터 접근마다 페이지테이블이 필요하다(많은 시간소요)

TLB
페이지테이블의 캐시.
접근마다 페이지테이블을 가는게 아닌 한번만.(성능 향상)

MMU
-가상메모리를 피지컬메모리로 변환시켜줌
-CPU가 MMU가 있다면 가상메모리를 쓰는 CPU

19/25
Memory mapped I/O
I/O mapped I/O

21/25
Polling  = waiting (휴대폰 배터리, 안테나 강도)
-cpu가 device상태를 계속 체크,일 중단x

Interrupt = 중간에 끊고 들어온다 (전화가 왔을 때,화면터치)

모든 Interrupt는 다른 Interrupt Service Routine이 있다

Interrupt Vector
인터럽트 발생 시 점프하는 주소테이블

DMA
CPU가 신경쓸 필요없이 device와 메모리 사이의 데이타이동



Lecture05

ARM
CPU의 디자인을 설계 (제작X) (팔컴,애플,삼성..등이 ARM 디자인의 CPU 사용)


9/25
[ ] 표시는 주소라는 뜻

11/25
pipelines : 여러 명령어를 단계를 나눠 동시에 처리
(멀티 프로세싱 같은 효과)  -> 퍼포먼스 향상

14/25
branch : 폰노이만 형식이여서 branch가 없으면 명령어처리를 순서대로만...
CMP : SUB를 통해서 수행

16/25
ARM의 Operating Mode
사용자가 일반이냐 슈퍼냐에 따라 하드웨어도 변경

인터럽트 발생 시
CPU가 FIQ (급한일 일때 (배터리x)) or IRQ로 변경

Abort Mode -> Page Fault(적절한 맵핑 없을 시, 자주겪는다)일 시 handling 한다

명령어 식별이 안될때 Undefined Mode (명령어 op코드 오류 등)

17/25
인터럽트 발생 -> CPU 모드가 바뀜 -> 인터럽트 핸들러 호출

CPU모드가 없을 시
os코드에 if then else 등 핸들러 부분으로 주소 이동 (페이지폴트 시, 인터럽트 시)

시스템콜을 사용 시 CPU가 SWI모드로 자동변경 -> 시스템콜 핸들러 호출


---------------------------------------------------------------------

1103

lecture05
10/25
레지스터가 아닌 상수를 쓸땐 # 을 쓴다

11/25
파이프라인은 병렬처리 처럼 보이게 한다

Dependency . 명령어의 처리결과가 아직 안나왔는데 그 결과값이 입력값인 경우
		Hazard가 발생한다.

파이프라인 3단계의 이점 : low power.

14/25
branch : 컨트롤 플로우를 바꾼다. 많이 안쓰느것을 권장. (break pipeline)
multiply : 파이프라인의 길이가 다르다. (계산 길이가 길어서 따로 분류)
		시간도 오래걸리고 파워도 많이 필요
			-> shift 로 많이 대체하여 사용

load/store multiple  : 주소 복사에 자주쓰인다 (array)

SWI : 시스템콜 할때 사용

시스템콜 대표 5 : open close read write IOCTL

Exception : 외부에서 자극을 줘서 발생한 상황에 대한 반응 (ex 인터럽트)
	 	(스마트폰 화면 터치 )

기존에 실행중이던 프로세스는 exception이 발생한 것을 모른다
	-> transparent. hidden.

가장 대표적인 exception 은 page fault.

page fault 와 virtual memory의 연관성 알아두기


16/25

cpu가 exception이 걸리면
인터럽트번호를 본 후
자동으로 cpu모드를 바꾼다.
그 후 인터럽트 핸들러 호출

SVC : 관리자모드. System call 을 사용할때의 모드

	(인터럽트 중에 시스템콜 사용 불가능  IRQ ->SVC 안된다)


Abort Mode : 페이지 테이블의 번호를 기록해둔다

모든 Exception 은 외부에서 온다.

SVC 만 내부에서 온다. (시스템콜)

fd = open();
	->   swi # 넘버
a = read(  ,  );
	->   swi # 넘버

넘버를 통해서 명령어 구분

Undefined Mode : 명령어의 op코드를 봤는데도 무슨 명령어인지 모를때

페이지폴트에는 두가지의 있다
Instruction -> Prefetch

Prefetch 랑 Data Abort 더 알아둘것
-Instruction fetch. 코드 페이지를 갖고 온다. (디맨드 페이징)
-data access 할때

Data Abort 를 발생시키는 것 -> load ,store

자바의 바이트코드가 스택머신이다


스택포인터는 가장 위를 가르키고 있다

스택은 각각의 어플리케이션 마다 있다

-> 스택포인터는 어플리케이션이 바뀔때 마다 바껴야한다 (스택포인터 위치 저장)
	프로그램 카운터도 저장

-> 각각의 어플리케이션마다 보따리가 있다(데이터를 저장해둔)


CPU모드가 계속 바뀐다

User Mode 일때 CPSR.
User Mode -> IRQ 가 되면 User Mode는 SPSR , IRQ 는 CPSR

20/25

FIQ 제외하고는 Register를 13개씩 공유

모드가 바뀔때 Register의 내용을 메모리에 save했다가

다시 원래 모드로 돌아왔을 때 restore 한다.

FIQ 가 빠른 이유: 메모리를 안 거칠 수 있다 -> FIQ에 할당된 Register가 많다.

(배터리를 뺐을 때 아주 잠깐동안 중요한 내용을 Flash memory에 저장한다)

R13 은 보통 Stack Pointer. R14은 return address

(버퍼 오버플로우 : return address를 조작한 해킹행위)

ARM 의 특징 : return address를 스택의 탑에 두지 않는다

	-> 하드웨어적으로 버퍼 오버플로우를 막는다



25/25

I	F	T	MODE
0	0		IRQ,SVC,...

0 0 일경우 인터럽트 발생하지 않는다


N		Z	C	V
negative	zero	carry 	Overflow
	   0일경우 1표시
음수일 경우 1표시	

ALU 계산을 할 경우 바뀌는 부분이다
(ex CMP R0 R1    -> 0 이면 같다 -> Z 부분에 1 이 된다)

N Z C V (컨디션 플래그) 를 통해 명령어 문구길이를 줄일 수 있다
(IF 랑 BRANCH 를 없앨 수 있다)
 -> break pipeline 을 막는다
 -> 퍼포먼스 향상

PSR 에 플래그가 있다

--------------------------------------------------------------------

1117

Conditional Execution
ARM 명령어에는 N Z C V 가 모두 포함돼있다

branch 명령어는 메인메모리에 access 한다 ( 전력소모 높높 )

Interrupt  ( 타임 인터럽트 , 페이지 폴트 , ... )

Gi Vi : 리눅스의 대표적인 타임 인터럽트


PSR 을 보면 알 수 있는 것
: 어떤 모드인지(User,FIQ), 현재 인터럽트가 on/off 인지


lecture06
10/16
Store PC into LR_<mode>  : 리턴 어드레스를 저장    (LR : 링크 레지스터)

LR 이 없다면 리턴어드레스를 스택의 탑에 저장해야함

Restore PC : 리턴 어드레스로 부터
Restore CPSR : SPSR 로 부터

14/16
SUBS 같은 명령어가 N Z C V 에 영향을 준다
ADDEQ 와 같이 N Z C V 를 비교


lecture07
02/16
B : Branch : 그냥 주소로 점프
BL : Branch Link : 주소로 점프 후 다시 복귀 (복귀할 주소를 LR에 저장)

04/16
pipeline 때문에 return address 는 PC-4

07/16
EORS r1,r3,r0	r3과r0를 Exclusive OR 해서 값이 0이면 NZCV 의 Z가 SET 
(결과가 플래그에 반영된다)

CMP r0,r1 값이 0이면 플래그에 결과 반영 (뺄셈) r0 값이 더 크면 NZ,NN


lecture08
03/21
Word 단위가 가장 빠르다
Byte 단위는 word단위로 한번 읽었다가 다시 필요한 만큼 byte로 ...

08/21

! 마크가 있을 시 레지스터 값 갱신되어 저장 (배열 같은 loop에 자주 쓰임)

12/21

I increment
D decrement
A after
B before

Stack의 종류

	-Asc			-Desc
	Full	Empty		Full	Empty

Full 스택은 스택포인터가 먼저 변한 후 push
Empty 스택은 push를 한 후 스택포인터가 변한다

 Asc Full 의 경우 push 할 때 IB (먼저 증가 한 후 저장)
     Empty의 경우 push 할 때 IA (저장 후 증가)

 Dsec Full 의 경우 pop 할 때 IA
      Empty의 경우 pop 할 때 IB


STMIB = STM Full Asc

-------------------------------------------------------------------

1122

stack frame : function call 을 위한 부분 

레드 블랙 트리 : 대표적인 이진트리로 커널의 스케쥴러에 사용된다


lecture08

19/21
R0-R1  : R0 부터 R1 까지

LR : 링크 레지스터

R0 - R1 , LR     :  오른쪽에 있는게 스택의 위쪽에 위치한다


21/21

r9 : start pointer
r11 : last pointer

r9과 r11이 같아질때까지 반복

메모리 카피



lecture09

버츄얼메모리
- 무제한 메모리 환상
- 프로텍션

컨텍스트 스위치 context switch

페이지 테이블은 메인메모리에 있다
-> 페이지 테이블 access를 줄이면 성능이 좋아진다
-> TLB (Translation lookaside buffer) 사용 : 페이지테이블의 캐시 

페이지 하나의 메모리 : 4K
	-> 4M 일 시 오래걸린다. 페이지 메모리 낭비 크다
	-> 1K 일 시 페이지를 너무 자주 가져온다.
	시간절약, 낭비절약

1960년대의 페이지 : 항상 작동중
현대 : 유저가 작동했을 때 작동 ( 이벤트 발생 시 )

메모리의 관점 : 메모리가 꽉 차 있을 시, 새로운 페이지를 받아들이려면
		기존에 있던것과 새로운것을 바꿔야 한다 ( 대체 )

LRU 알고리즘 : Least Recently Used	ex) 캐시

캐시는 우리가 사용하는 것보다 용량이 작다 -> 대체를 많이 함
 ( Replace for limited space )

05/18
하드웨어적 : 자동으로 페이지테이블을 찾고, 없을 시 페이지 폴트

12/18
page 는 고정된 사이즈. 항상 같은 사이즈


15/18
virtual address : 페이지 테이블을 찾기 위한 정보.index,information to pagetable
physical address : 실제 주소,위치

VA : idx    |  offset

여러개의 페이지 테이블을 중첩시킨다

	VA	PA
	VA	PA
	VA	새로운 페이지 테이블의 주소 ( 포인터 역할 )
			-----> VA  :  idx1  |  idx2  | offset
				idx2 을 두번째 테이블에서 사용

intel 은 3단계의 페이지 테이블을 쓴다

----------------------------------------------

1201

lecture10
2/21
MMU-less  -> No Virtual Memory

CO-PROCESSORS 15 의 특징
 	Virtual Memory (MMU)
	Cache memory
	Write buffer

3/21
ARM Core 가 CPU 였는데 진화,개발되어 SoC 가 CPU

컨텍스트 스위치 할 때 
예전 프로세스의 Cache, TLB 는 현재 프로세스에 노쓸모
-> 캐시 메모리 삭제(Flush) : 밑으로 내려보낸다
컨텍스트 스위치 자주하면 성능이 떨어진다

write through Cache 캐시에 쓰면 메모리에 바로 써진다

CO-PROCESSOR 15
Cache Flush, Cache Locking한다

5/21
register 1	중요하므로 조심 , 캐시 MMU 온오프 가능
-> 메모리 데이터와 캐시 데이터가 불일치 하는 문제

캐시 : 최신 데이터
메모리 : 오래된 데이터

Cache Coherence problem
:multiple CPU , share memory 일 시 생기는 문제
한 캐시 데이터 -> 메모리, 다른 캐시는 메모리의 데이터 사용(오래된 데이터)



19/21
VA 	page 가 1M 일시 20 bits 가 필요
		4k 는 12bits 필요 -> 나머지 비트는 또 다른 index를 쓴다

Memory Access

두번째줄 AP 는 사용자 모드에 따라 (관리자 X)
	C 가 1 이면 캐싱 X
	B 가 1 이면 write buffer X

맨뒤 두 비트 1 0 이면 1M 페이지
	     0 1 이면 4k 페이지









